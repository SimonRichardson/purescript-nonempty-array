// Generated by psc version 0.6.0.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($amp, $up, complement, shl, shr, zshr, $bar) {
        this["&"] = $amp;
        this["^"] = $up;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
        this["|"] = $bar;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $bar = function (dict) {
        return dict["|"];
    };
    var $up = function (dict) {
        return dict["^"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_1) {
        return $less$greater(__dict_Semigroup_1);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $amp = function (dict) {
        return dict["&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_28) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_36) {
        if (_36 instanceof LT) {
            return "LT";
        };
        if (_36 instanceof GT) {
            return "GT";
        };
        if (_36 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_29) {
        if (_29) {
            return "true";
        };
        if (!_29) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_2) {
        return new Show(showArrayImpl(show(__dict_Show_2)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_43) {
        return function (_44) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_3) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_3)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_4) {
        return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_5) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_5["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_5)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_6) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_32) {
        return function (_33) {
            return false;
        };
    }, function (_30) {
        return function (_31) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_37) {
        return function (_38) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_39) {
        return function (_40) {
            if (!_39 && !_40) {
                return EQ.value;
            };
            if (!_39 && _40) {
                return LT.value;
            };
            if (_39 && _40) {
                return EQ.value;
            };
            if (_39 && !_40) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var $$const = function (_24) {
        return function (_25) {
            return _24;
        };
    };
    var $$void = function (__dict_Functor_8) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_8)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_10) {
        return function (a1) {
            return function (a2) {
                var _352 = compare(__dict_Ord_10)(a1)(a2);
                if (_352 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _353 = compare(__dict_Ord_11)(a1)(a2);
                if (_353 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _354 = compare(__dict_Ord_12)(a1)(a2);
                if (_354 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _355 = compare(__dict_Ord_13)(a1)(a2);
                if (_355 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_7) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_7))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_7))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_9) {
        return new Ord(function () {
            return eqArray(__dict_Ord_9["__superclass_Prelude.Eq_0"]());
        }, function (_41) {
            return function (_42) {
                if (_41.length === 0 && _42.length === 0) {
                    return EQ.value;
                };
                if (_41.length === 0) {
                    return LT.value;
                };
                if (_42.length === 0) {
                    return GT.value;
                };
                if (_41.length >= 1) {
                    var _362 = _41.slice(1);
                    if (_42.length >= 1) {
                        var _360 = _42.slice(1);
                        var _358 = compare(__dict_Ord_9)(_41[0])(_42[0]);
                        if (_358 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_9))(_362)(_360);
                        };
                        return _358;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_34) {
        return function (_35) {
            if (_34 instanceof LT && _35 instanceof LT) {
                return true;
            };
            if (_34 instanceof GT && _35 instanceof GT) {
                return true;
            };
            if (_34 instanceof EQ && _35 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numComplement, numShl, numShr, numZshr, numOr);
    var asTypeOf = function (_26) {
        return function (_27) {
            return _26;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_14) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_14)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "#": $hash, 
        "$": $dollar, 
        "%": $percent, 
        "&": $amp, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "++": $plus$plus, 
        "-": $minus, 
        "/": $div, 
        "/=": $div$eq, 
        ":": $colon, 
        "<": $less, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">": $greater, 
        ">=": $greater$eq, 
        ">>=": $greater$greater$eq, 
        ">>>": $greater$greater$greater, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Bits: Bits, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        Unit: Unit, 
        "^": $up, 
        ap: ap, 
        applicativeArr: applicativeArr, 
        applyArr: applyArr, 
        asTypeOf: asTypeOf, 
        bindArr: bindArr, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        complement: complement, 
        cons: cons, 
        "const": $$const, 
        eqArray: eqArray, 
        eqBoolean: eqBoolean, 
        eqNumber: eqNumber, 
        eqOrdering: eqOrdering, 
        eqString: eqString, 
        eqUnit: eqUnit, 
        flip: flip, 
        functorArr: functorArr, 
        id: id, 
        liftA1: liftA1, 
        liftM1: liftM1, 
        monadArr: monadArr, 
        negate: negate, 
        not: not, 
        numNumber: numNumber, 
        ordArray: ordArray, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordUnit: ordUnit, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupArr: semigroupArr, 
        semigroupString: semigroupString, 
        semigroupUnit: semigroupUnit, 
        semigroupoidArr: semigroupoidArr, 
        shl: shl, 
        show: show, 
        showArray: showArray, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showOrdering: showOrdering, 
        showString: showString, 
        showUnit: showUnit, 
        shr: shr, 
        unit: unit, 
        "void": $$void, 
        zshr: zshr, 
        "|": $bar, 
        "||": $bar$bar
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var acos = Math.acos;;
    var asin = Math.asin;;
    var atan = Math.atan;;
    function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
    var ceil = Math.ceil;;
    var cos = Math.cos;;
    var exp = Math.exp;;
    var floor = Math.floor;;
    var log = Math.log;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var tan = Math.tan;;
    var e       = Math.E;;
    var ln2     = Math.LN2;;
    var ln10    = Math.LN10;;
    var log2e   = Math.LOG2E;;
    var log10e  = Math.LOG10E;;
    var pi      = Math.PI;;
    var sqrt1_2 = Math.SQRT1_2;;
    var sqrt2   = Math.SQRT2;;
    return {
        abs: abs, 
        acos: acos, 
        asin: asin, 
        atan: atan, 
        atan2: atan2, 
        ceil: ceil, 
        cos: cos, 
        e: e, 
        exp: exp, 
        floor: floor, 
        ln10: ln10, 
        ln2: ln2, 
        log: log, 
        log10e: log10e, 
        log2e: log2e, 
        max: max, 
        min: min, 
        pi: pi, 
        pow: pow, 
        round: round, 
        sin: sin, 
        sqrt: sqrt, 
        sqrt1_2: sqrt1_2, 
        sqrt2: sqrt2, 
        tan: tan
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        mkFn0: mkFn0, 
        mkFn1: mkFn1, 
        mkFn10: mkFn10, 
        mkFn2: mkFn2, 
        mkFn3: mkFn3, 
        mkFn4: mkFn4, 
        mkFn5: mkFn5, 
        mkFn6: mkFn6, 
        mkFn7: mkFn7, 
        mkFn8: mkFn8, 
        mkFn9: mkFn9, 
        on: on, 
        runFn0: runFn0, 
        runFn1: runFn1, 
        runFn10: runFn10, 
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4, 
        runFn5: runFn5, 
        runFn6: runFn6, 
        runFn7: runFn7, 
        runFn8: runFn8, 
        runFn9: runFn9
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_45) {
        return function (_46) {
            return function (_47) {
                return _45(_46)(_47);
            };
        };
    };
    var functorRef = new Prelude.Functor(function (_48) {
        return function (_49) {
            return _48(_49);
        };
    });
    var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    return {
        Ref: Ref, 
        eqRef: eqRef, 
        functorRef: functorRef, 
        liftRef: liftRef
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Char = {
        create: function (value) {
            return value;
        }
    };
    
    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var showChar = new Prelude.Show(function (_55) {
        return "Char " + Prelude.show(Prelude.showString)(_55);
    });
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_51) {
        return function (_52) {
            return _51 === _52;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_53) {
        return function (_54) {
            return Prelude.compare(Prelude.ordString)(_53)(_54);
        };
    });
    var charString = function (_50) {
        return _50;
    };
    return {
        charString: charString, 
        eqChar: eqChar, 
        fromCharCode: fromCharCode, 
        ordChar: ordChar, 
        showChar: showChar, 
        toCharCode: toCharCode
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function charCodeAt(i) {
      return function(s) {
        return s.charCodeAt(i);
      };
    }
    ;
    
    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        forE: forE, 
        foreachE: foreachE, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE, 
        runPure: runPure, 
        untilE: untilE, 
        whileE: whileE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function showErrorImpl(err) {  return err.stack ? err.stack : err.toString();};
    function error(msg) {  return new Error(msg);};;
    function message(e) {  return e.message;};
    function throwException(e) {  return function() {    throw e;  };};
    function catchException(c) {  return function(t) {    return function() {      try {        return t();      } catch(e) {        if (e instanceof Error || {}.toString.call(e) === '[object Error]') {          return c(e)();        } else {          return c(new Error(e.toString()))();        }      }    };  };};
    var showError = new Prelude.Show(showErrorImpl);
    return {
        catchException: catchException, 
        error: error, 
        message: message, 
        showError: showError, 
        showErrorImpl: showErrorImpl, 
        throwException: throwException
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function random() {  return Math.random();};
    return {
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function newSTArray(len) {  return function(a) {    return function() {      var arr = [];      for (var i = 0; i < len; i++) {        arr[i] = a;      };      return arr;    };  };};
    function peekSTArray(arr) {  return function(i) {    return function() {      return arr[i];    };  };};
    function pokeSTArray(arr) {  return function(i) {    return function(a) {      return function() {        return arr[i] = a;      };    };  };};
    function runST(f) {  return f;};
    function runSTArray(f) {  return f;};
    return {
        modifySTRef: modifySTRef, 
        newSTArray: newSTArray, 
        newSTRef: newSTRef, 
        peekSTArray: peekSTArray, 
        pokeSTArray: pokeSTArray, 
        readSTRef: readSTRef, 
        runST: runST, 
        runSTArray: runSTArray, 
        writeSTRef: writeSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_15) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_15)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_16) {
        return function (_61) {
            return function (_62) {
                if (_61) {
                    return _62;
                };
                if (!_61) {
                    return Prelude["return"](__dict_Monad_16)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_17) {
        return function (_63) {
            return function (_64) {
                if (!_63) {
                    return _64;
                };
                if (_63) {
                    return Prelude["return"](__dict_Monad_17)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_18) {
        return function (_56) {
            return function (_57) {
                if (_56 === 0) {
                    return Prelude["return"](__dict_Monad_18)([  ]);
                };
                return Prelude[">>="](__dict_Monad_18["__superclass_Prelude.Bind_1"]())(_57)(function (_4) {
                    return Prelude[">>="](__dict_Monad_18["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_18)(_56 - 1)(_57))(function (_3) {
                        return Prelude["return"](__dict_Monad_18)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_19) {
        return function (_58) {
            return function (_59) {
                return function (_60) {
                    if (_60.length === 0) {
                        return Prelude["return"](__dict_Monad_19)(_59);
                    };
                    if (_60.length >= 1) {
                        var _392 = _60.slice(1);
                        return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(_58(_59)(_60[0]))(function (a$prime) {
                            return foldM(__dict_Monad_19)(_58)(a$prime)(_392);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        foldM: foldM, 
        replicateM: replicateM, 
        unless: unless, 
        when: when
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Lazy(defer) {
        this.defer = defer;
    };
    function Lazy1(defer1) {
        this.defer1 = defer1;
    };
    function Lazy2(defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_20) {
        return function (f) {
            return defer2(__dict_Lazy2_20)(function (_) {
                return f(fix2(__dict_Lazy2_20)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_21) {
        return function (f) {
            return defer1(__dict_Lazy1_21)(function (_) {
                return f(fix1(__dict_Lazy1_21)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_22) {
        return function (f) {
            return defer(__dict_Lazy_22)(function (_) {
                return f(fix(__dict_Lazy_22)(f));
            });
        };
    };
    return {
        Lazy: Lazy, 
        Lazy1: Lazy1, 
        Lazy2: Lazy2, 
        defer: defer, 
        defer1: defer1, 
        defer2: defer2, 
        fix: fix, 
        fix1: fix1, 
        fix2: fix2
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_23) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_23)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_24) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_24)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_25) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_25)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_26) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_26)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_27) {
        return function (w) {
            return $less$less$eq(__dict_Extend_27)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        "<<=": $less$less$eq, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        Extend: Extend, 
        duplicate: duplicate, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_28) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_28)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_29) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_29)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_30) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_30)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_31) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_31)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_32) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_32)(cond)(function (cond$prime) {
                        return cond$prime ? t : f;
                    });
                };
            };
        };
    };
    return {
        "<=<": $less$eq$less, 
        "=<<": $eq$less$less, 
        ">=>": $greater$eq$greater, 
        ifM: ifM, 
        join: join
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_33) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_33)(Prelude["<$>"](__dict_Apply_33["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_34) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_34)(Prelude["<$>"](__dict_Apply_34["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_35) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_35)(Prelude["<*>"](__dict_Apply_35)(Prelude["<*>"](__dict_Apply_35)(Prelude["<*>"](__dict_Apply_35)(Prelude["<$>"](__dict_Apply_35["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_36) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<$>"](__dict_Apply_36["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_37) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_38) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_39) {
        return function (a) {
            return $times$greater(__dict_Apply_39)(a)(forever(__dict_Apply_39)(a));
        };
    };
    return {
        "*>": $times$greater, 
        "<*": $less$times, 
        forever: forever, 
        lift2: lift2, 
        lift3: lift3, 
        lift4: lift4, 
        lift5: lift5
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        "<|>": $less$bar$greater, 
        Alt: Alt
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_40) {
        return function (__dict_Lazy1_41) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_40["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_40["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_41)(function (_) {
                    return many(__dict_Alternative_40)(__dict_Lazy1_41)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_42) {
        return function (__dict_Lazy1_43) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_42["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_42)(__dict_Lazy1_43)(v))(Prelude.pure(__dict_Alternative_42["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_44) {
        return function (_65) {
            if (_65) {
                return Prelude["return"](__dict_MonadPlus_44["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_65) {
                return Control_Plus.empty((__dict_MonadPlus_44["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var showEither = function (__dict_Show_45) {
        return function (__dict_Show_46) {
            return new Prelude.Show(function (_75) {
                if (_75 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_45)(_75.value0) + ")");
                };
                if (_75 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_46)(_75.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = new Prelude.Functor(function (_69) {
        return function (_70) {
            if (_70 instanceof Left) {
                return new Left(_70.value0);
            };
            if (_70 instanceof Right) {
                return new Right(_69(_70.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var eqEither = function (__dict_Eq_49) {
        return function (__dict_Eq_50) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_49)(__dict_Eq_50))(a)(b);
                };
            }, function (_76) {
                return function (_77) {
                    if (_76 instanceof Left && _77 instanceof Left) {
                        return Prelude["=="](__dict_Eq_49)(_76.value0)(_77.value0);
                    };
                    if (_76 instanceof Right && _77 instanceof Right) {
                        return Prelude["=="](__dict_Eq_50)(_76.value0)(_77.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_47) {
        return function (__dict_Ord_48) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_47["__superclass_Prelude.Eq_0"]())(__dict_Ord_48["__superclass_Prelude.Eq_0"]());
            }, function (_78) {
                return function (_79) {
                    if (_78 instanceof Left && _79 instanceof Left) {
                        return Prelude.compare(__dict_Ord_47)(_78.value0)(_79.value0);
                    };
                    if (_78 instanceof Right && _79 instanceof Right) {
                        return Prelude.compare(__dict_Ord_48)(_78.value0)(_79.value0);
                    };
                    if (_78 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_79 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (_66) {
        return function (_67) {
            return function (_68) {
                if (_68 instanceof Left) {
                    return _66(_68.value0);
                };
                if (_68 instanceof Right) {
                    return _67(_68.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = new Prelude.Apply(function (_71) {
        return function (_72) {
            if (_71 instanceof Left) {
                return new Left(_71.value0);
            };
            if (_71 instanceof Right) {
                return Prelude["<$>"](functorEither)(_71.value0)(_72);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    var altEither = new Control_Alt.Alt(function (_73) {
        return function (_74) {
            if (_73 instanceof Left) {
                return _74;
            };
            return _73;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        altEither: altEither, 
        applicativeEither: applicativeEither, 
        applyEither: applyEither, 
        bindEither: bindEither, 
        either: either, 
        eqEither: eqEither, 
        functorEither: functorEither, 
        isLeft: isLeft, 
        isRight: isRight, 
        monadEither: monadEither, 
        ordEither: ordEither, 
        showEither: showEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var choice2 = Data_Either.either;
    var choice3 = function (a) {
        return function (b) {
            return function (c) {
                return Data_Either.either(a)(choice2(b)(c));
            };
        };
    };
    var choice4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return Data_Either.either(a)(choice3(b)(c)(d));
                };
            };
        };
    };
    var choice5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return Data_Either.either(a)(choice4(b)(c)(d)(e));
                    };
                };
            };
        };
    };
    var choice6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return Data_Either.either(a)(choice5(b)(c)(d)(e)(f));
                        };
                    };
                };
            };
        };
    };
    var choice7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return Data_Either.either(a)(choice6(b)(c)(d)(e)(f)(g));
                            };
                        };
                    };
                };
            };
        };
    };
    var choice8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return Data_Either.either(a)(choice7(b)(c)(d)(e)(f)(g)(h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return Data_Either.either(a)(choice8(b)(c)(d)(e)(f)(g)(h)(i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return Data_Either.either(a)(choice9(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        choice10: choice10, 
        choice2: choice2, 
        choice3: choice3, 
        choice4: choice4, 
        choice5: choice5, 
        choice6: choice6, 
        choice7: choice7, 
        choice8: choice8, 
        choice9: choice9
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var showMaybe = function (__dict_Show_51) {
        return new Prelude.Show(function (_95) {
            if (_95 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_51)(_95.value0) + ")");
            };
            if (_95 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_52) {
        return new Prelude.Semigroup(function (_93) {
            return function (_94) {
                if (_93 instanceof Nothing) {
                    return _94;
                };
                if (_94 instanceof Nothing) {
                    return _93;
                };
                if (_93 instanceof Just && _94 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_52)(_93.value0)(_94.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_80) {
        return function (_81) {
            return function (_82) {
                if (_82 instanceof Nothing) {
                    return _80;
                };
                if (_82 instanceof Just) {
                    return _81(_82.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (_83) {
        return function (_84) {
            if (_84 instanceof Just) {
                return new Just(_83(_84.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (_91) {
        return function (_92) {
            if (_92 instanceof Nothing) {
                return Nothing.value;
            };
            return Just.create(_91(_92));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_54) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_54))(a)(b);
            };
        }, function (_96) {
            return function (_97) {
                if (_96 instanceof Nothing && _97 instanceof Nothing) {
                    return true;
                };
                if (_96 instanceof Just && _97 instanceof Just) {
                    return Prelude["=="](__dict_Eq_54)(_96.value0)(_97.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_53) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_53["__superclass_Prelude.Eq_0"]());
        }, function (_98) {
            return function (_99) {
                if (_98 instanceof Just && _99 instanceof Just) {
                    return Prelude.compare(__dict_Ord_53)(_98.value0)(_99.value0);
                };
                if (_98 instanceof Nothing && _99 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_98 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_99 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_85) {
        return function (_86) {
            if (_85 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_85.value0)(_86);
            };
            if (_85 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_89) {
        return function (_90) {
            if (_89 instanceof Just) {
                return _90(_89.value0);
            };
            if (_89 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_87) {
        return function (_88) {
            if (_87 instanceof Nothing) {
                return _88;
            };
            return _87;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Just: Just, 
        Nothing: Nothing, 
        altMaybe: altMaybe, 
        alternativeMaybe: alternativeMaybe, 
        applicativeMaybe: applicativeMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe, 
        eqMaybe: eqMaybe, 
        extendMaybe: extendMaybe, 
        fromMaybe: fromMaybe, 
        functorMaybe: functorMaybe, 
        isJust: isJust, 
        isNothing: isNothing, 
        maybe: maybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        ordMaybe: ordMaybe, 
        plusMaybe: plusMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_102) {
        if (_102.length >= 1) {
            var _460 = _102.slice(1);
            return new Data_Maybe.Just(_460);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy__118) {
            return function (__copy__119) {
                return function (__copy__120) {
                    var _118 = __copy__118;
                    var _119 = __copy__119;
                    var _120 = __copy__120;
                    tco: while (true) {
                        if (_120.length >= 1) {
                            var _465 = _120.slice(1);
                            if (_119(_120[0])) {
                                var __tco__118 = Prelude[":"](_120[0])(_118);
                                var __tco__119 = _119;
                                _118 = __tco__118;
                                _119 = __tco__119;
                                _120 = _465;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_118), 
                            rest: _120
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _466 = comp(x)(y);
                    if (_466 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_466 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_466 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_55) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_55))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_104) {
        if (_104.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function (_111) {
        return function (_112) {
            if (_112.length === 0) {
                return [  ];
            };
            if (_112.length >= 1) {
                var _471 = _112.slice(1);
                return Prelude[":"](_112[0])(nubBy(_111)(filter(function (y) {
                    return !_111(_112[0])(y);
                })(_471)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_56) {
        return nubBy(Prelude["=="](__dict_Eq_56));
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (__copy__101) {
        var _101 = __copy__101;
        tco: while (true) {
            if (_101.length >= 1) {
                var _474 = _101.slice(1);
                if (_474.length === 0) {
                    return new Data_Maybe.Just(_101[0]);
                };
            };
            if (_101.length >= 1) {
                var _476 = _101.slice(1);
                _101 = _476;
                continue tco;
            };
            return Data_Maybe.Nothing.value;
        };
    };
    var intersectBy = function (_108) {
        return function (_109) {
            return function (_110) {
                if (_109.length === 0) {
                    return [  ];
                };
                if (_110.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_108(x))(_110) >= 0;
                };
                return filter(el)(_109);
            };
        };
    };
    var intersect = function (__dict_Eq_57) {
        return intersectBy(Prelude["=="](__dict_Eq_57));
    };
    var init = function (_103) {
        if (_103.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_103) - 1)(_103));
    };
    var head = function (_100) {
        if (_100.length >= 1) {
            var _483 = _100.slice(1);
            return new Data_Maybe.Just(_100[0]);
        };
        return Data_Maybe.Nothing.value;
    };
    var groupBy = (function () {
        var go = function (__copy__115) {
            return function (__copy__116) {
                return function (__copy__117) {
                    var _115 = __copy__115;
                    var _116 = __copy__116;
                    var _117 = __copy__117;
                    tco: while (true) {
                        if (_117.length === 0) {
                            return reverse(_115);
                        };
                        if (_117.length >= 1) {
                            var _488 = _117.slice(1);
                            var sp = span(_116(_117[0]))(_488);
                            var __tco__115 = Prelude[":"](Prelude[":"](_117[0])(sp.init))(_115);
                            var __tco__116 = _116;
                            _115 = __tco__115;
                            _116 = __tco__116;
                            _117 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_58) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_58))(xs);
        };
    };
    var group$prime = function (__dict_Ord_59) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_59["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_59));
    };
    var functorArray = new Prelude.Functor(map);
    var elemLastIndex = function (__dict_Eq_60) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_60)(x));
        };
    };
    var elemIndex = function (__dict_Eq_61) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_61)(x));
        };
    };
    var deleteBy = function (_105) {
        return function (_106) {
            return function (_107) {
                if (_107.length === 0) {
                    return [  ];
                };
                var _492 = findIndex(_105(_106))(_107);
                if (_492 < 0) {
                    return _107;
                };
                return deleteAt(_492)(1)(_107);
            };
        };
    };
    var $$delete = function (__dict_Eq_62) {
        return deleteBy(Prelude["=="](__dict_Eq_62));
    };
    var $bslash$bslash = function (__dict_Eq_63) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__113) {
                    return function (__copy__114) {
                        var _113 = __copy__113;
                        var _114 = __copy__114;
                        tco: while (true) {
                            if (_114.length === 0) {
                                return _113;
                            };
                            if (_113.length === 0) {
                                return [  ];
                            };
                            if (_114.length >= 1) {
                                var _496 = _114.slice(1);
                                var __tco__113 = $$delete(__dict_Eq_63)(_114[0])(_113);
                                _113 = __tco__113;
                                _114 = _496;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        "!!": $bang$bang, 
        "..": $dot$dot, 
        "\\\\": $bslash$bslash, 
        altArray: altArray, 
        alternativeArray: alternativeArray, 
        append: append, 
        applicativeArray: applicativeArray, 
        applyArray: applyArray, 
        bindArray: bindArray, 
        catMaybes: catMaybes, 
        concat: concat, 
        concatMap: concatMap, 
        "delete": $$delete, 
        deleteAt: deleteAt, 
        deleteBy: deleteBy, 
        drop: drop, 
        elemIndex: elemIndex, 
        elemLastIndex: elemLastIndex, 
        filter: filter, 
        findIndex: findIndex, 
        findLastIndex: findLastIndex, 
        functorArray: functorArray, 
        group: group, 
        "group'": group$prime, 
        groupBy: groupBy, 
        head: head, 
        init: init, 
        insertAt: insertAt, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        last: last, 
        length: length, 
        map: map, 
        mapMaybe: mapMaybe, 
        monadArray: monadArray, 
        monadPlusArray: monadPlusArray, 
        nub: nub, 
        nubBy: nubBy, 
        "null": $$null, 
        plusArray: plusArray, 
        range: range, 
        reverse: reverse, 
        semigroupArray: semigroupArray, 
        singleton: singleton, 
        snoc: snoc, 
        sort: sort, 
        sortBy: sortBy, 
        span: span, 
        tail: tail, 
        take: take, 
        updateAt: updateAt, 
        zipWith: zipWith
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_121) {
        if (_121 instanceof Data_Maybe.Just) {
            return _121.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var tail = function (_123) {
        if (_123.length >= 1) {
            var _501 = _123.slice(1);
            return _501;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (_122) {
        if (_122.length >= 1) {
            var _504 = _122.slice(1);
            return _122[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        head: head, 
        init: init, 
        last: last, 
        tail: tail
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_64) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_64);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_65) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_65["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_65)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArr: monoidArr, 
        monoidArray: monoidArray, 
        monoidMaybe: monoidMaybe, 
        monoidString: monoidString, 
        monoidUnit: monoidUnit
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = {
        create: function (value) {
            return value;
        }
    };
    var showAll = new Prelude.Show(function (_129) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_129) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_130) {
        return function (_131) {
            return _130 && _131;
        };
    });
    var runAll = function (_124) {
        return _124;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_127) {
        return function (_128) {
            return _127 !== _128;
        };
    }, function (_125) {
        return function (_126) {
            return _125 === _126;
        };
    });
    return {
        All: All, 
        eqAll: eqAll, 
        monoidAll: monoidAll, 
        runAll: runAll, 
        semigroupAll: semigroupAll, 
        showAll: showAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = {
        create: function (value) {
            return value;
        }
    };
    var showAny = new Prelude.Show(function (_137) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_137) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_138) {
        return function (_139) {
            return _138 || _139;
        };
    });
    var runAny = function (_132) {
        return _132;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_135) {
        return function (_136) {
            return _135 !== _136;
        };
    }, function (_133) {
        return function (_134) {
            return _133 === _134;
        };
    });
    return {
        Any: Any, 
        eqAny: eqAny, 
        monoidAny: monoidAny, 
        runAny: runAny, 
        semigroupAny: semigroupAny, 
        showAny: showAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Dual = {
        create: function (value) {
            return value;
        }
    };
    var showDual = function (__dict_Show_66) {
        return new Prelude.Show(function (_147) {
            return "Dual (" + (Prelude.show(__dict_Show_66)(_147) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_67) {
        return new Prelude.Semigroup(function (_148) {
            return function (_149) {
                return Prelude["<>"](__dict_Semigroup_67)(_149)(_148);
            };
        });
    };
    var runDual = function (_140) {
        return _140;
    };
    var monoidDual = function (__dict_Monoid_69) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_69["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_69));
    };
    var eqDual = function (__dict_Eq_70) {
        return new Prelude.Eq(function (_143) {
            return function (_144) {
                return Prelude["/="](__dict_Eq_70)(_143)(_144);
            };
        }, function (_141) {
            return function (_142) {
                return Prelude["=="](__dict_Eq_70)(_141)(_142);
            };
        });
    };
    var ordDual = function (__dict_Ord_68) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_68["__superclass_Prelude.Eq_0"]());
        }, function (_145) {
            return function (_146) {
                return Prelude.compare(__dict_Ord_68)(_145)(_146);
            };
        });
    };
    return {
        Dual: Dual, 
        eqDual: eqDual, 
        monoidDual: monoidDual, 
        ordDual: ordDual, 
        runDual: runDual, 
        semigroupDual: semigroupDual, 
        showDual: showDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = {
        create: function (value) {
            return value;
        }
    };
    var semigroupEndo = new Prelude.Semigroup(function (_151) {
        return function (_152) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_151)(_152);
        };
    });
    var runEndo = function (_150) {
        return _150;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        monoidEndo: monoidEndo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Product = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Product = {
        create: function (value) {
            return value;
        }
    };
    var showProduct = new Prelude.Show(function (_160) {
        return "Product (" + (Prelude.show(Prelude.showNumber)(_160) + ")");
    });
    var semigroupProduct = new Prelude.Semigroup(function (_161) {
        return function (_162) {
            return _161 * _162;
        };
    });
    var runProduct = function (_153) {
        return _153;
    };
    var monoidProduct = new Data_Monoid.Monoid(function () {
        return semigroupProduct;
    }, 1);
    var eqProduct = new Prelude.Eq(function (_156) {
        return function (_157) {
            return _156 !== _157;
        };
    }, function (_154) {
        return function (_155) {
            return _154 === _155;
        };
    });
    var ordProduct = new Prelude.Ord(function () {
        return eqProduct;
    }, function (_158) {
        return function (_159) {
            return Prelude.compare(Prelude.ordNumber)(_158)(_159);
        };
    });
    return {
        Product: Product, 
        eqProduct: eqProduct, 
        monoidProduct: monoidProduct, 
        ordProduct: ordProduct, 
        runProduct: runProduct, 
        semigroupProduct: semigroupProduct, 
        showProduct: showProduct
    };
})();
var PS = PS || {};
PS.Data_Monoid_Sum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Sum = {
        create: function (value) {
            return value;
        }
    };
    var showSum = new Prelude.Show(function (_170) {
        return "Sum (" + (Prelude.show(Prelude.showNumber)(_170) + ")");
    });
    var semigroupSum = new Prelude.Semigroup(function (_171) {
        return function (_172) {
            return _171 + _172;
        };
    });
    var runSum = function (_163) {
        return _163;
    };
    var monoidSum = new Data_Monoid.Monoid(function () {
        return semigroupSum;
    }, 0);
    var eqSum = new Prelude.Eq(function (_166) {
        return function (_167) {
            return _166 !== _167;
        };
    }, function (_164) {
        return function (_165) {
            return _164 === _165;
        };
    });
    var ordSum = new Prelude.Ord(function () {
        return eqSum;
    }, function (_168) {
        return function (_169) {
            return Prelude.compare(Prelude.ordNumber)(_168)(_169);
        };
    });
    return {
        Sum: Sum, 
        eqSum: eqSum, 
        monoidSum: monoidSum, 
        ordSum: ordSum, 
        runSum: runSum, 
        semigroupSum: semigroupSum, 
        showSum: showSum
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_177) {
        if (_177.length >= 1) {
            var _561 = _177.slice(1);
            var _555 = unzip(_561);
            return new Tuple(Prelude[":"]((_177[0]).value0)(_555.value0), Prelude[":"]((_177[0]).value1)(_555.value1));
        };
        if (_177.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_175) {
        return function (_176) {
            return _175(_176.value0)(_176.value1);
        };
    };
    var swap = function (_178) {
        return new Tuple(_178.value1, _178.value0);
    };
    var snd = function (_174) {
        return _174.value1;
    };
    var showTuple = function (__dict_Show_71) {
        return function (__dict_Show_72) {
            return new Prelude.Show(function (_179) {
                return "Tuple (" + (Prelude.show(__dict_Show_71)(_179.value0) + (") (" + (Prelude.show(__dict_Show_72)(_179.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_184) {
        return function (_185) {
            return new Tuple(_185.value0, _184.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_73) {
        return function (__dict_Semigroup_74) {
            return new Prelude.Semigroup(function (_186) {
                return function (_187) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_73)(_186.value0)(_187.value0), Prelude["<>"](__dict_Semigroup_74)(_186.value1)(_187.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_77) {
        return function (__dict_Monoid_78) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_77["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_78["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_77), Data_Monoid.mempty(__dict_Monoid_78)));
        };
    };
    var functorTuple = new Prelude.Functor(function (_188) {
        return function (_189) {
            return new Tuple(_189.value0, _188(_189.value1));
        };
    });
    var fst = function (_173) {
        return _173.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_80) {
        return function (__dict_Lazy1_81) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_80)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_81)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_82) {
        return function (__dict_Lazy2_83) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_82)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_83)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_84) {
        return function (__dict_Lazy_85) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_84)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_85)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (_194) {
        return function (_195) {
            return new Tuple(_195.value0, _194(_195));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_86) {
        return function (__dict_Eq_87) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_86)(__dict_Eq_87))(t1)(t2);
                };
            }, function (_180) {
                return function (_181) {
                    return Prelude["=="](__dict_Eq_86)(_180.value0)(_181.value0) && Prelude["=="](__dict_Eq_87)(_180.value1)(_181.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_75) {
        return function (__dict_Ord_76) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_75["__superclass_Prelude.Eq_0"]())(__dict_Ord_76["__superclass_Prelude.Eq_0"]());
            }, function (_182) {
                return function (_183) {
                    var _606 = Prelude.compare(__dict_Ord_75)(_182.value0)(_183.value0);
                    if (_606 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_76)(_182.value1)(_183.value1);
                    };
                    return _606;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_89) {
        return new Prelude.Apply(function (_190) {
            return function (_191) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_89)(_190.value0)(_191.value0), _190.value1(_191.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_88) {
        return new Prelude.Bind(function (_192) {
            return function (_193) {
                var _619 = _193(_192.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_88)(_192.value0)(_619.value0), _619.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_88);
        });
    };
    var applicativeTuple = function (__dict_Monoid_90) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_90["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_90)));
    };
    var monadTuple = function (__dict_Monoid_79) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_79);
        }, function () {
            return bindTuple(__dict_Monoid_79["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        applicativeTuple: applicativeTuple, 
        applyTuple: applyTuple, 
        bindTuple: bindTuple, 
        comonadTuple: comonadTuple, 
        curry: curry, 
        eqTuple: eqTuple, 
        extendTuple: extendTuple, 
        fst: fst, 
        functorTuple: functorTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple, 
        lazyTuple: lazyTuple, 
        monadTuple: monadTuple, 
        monoidTuple: monoidTuple, 
        ordTuple: ordTuple, 
        semigroupTuple: semigroupTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        showTuple: showTuple, 
        snd: snd, 
        swap: swap, 
        uncurry: uncurry, 
        unzip: unzip, 
        zip: zip
    };
})();
var PS = PS || {};
PS.Data_Enum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Char = PS.Data_Char;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Cardinality = {
        create: function (value) {
            return value;
        }
    };
    function Enum(__superclass_Prelude$dotOrd_0, cardinality, firstEnum, lastEnum, pred, succ) {
        this["__superclass_Prelude.Ord_0"] = __superclass_Prelude$dotOrd_0;
        this.cardinality = cardinality;
        this.firstEnum = firstEnum;
        this.lastEnum = lastEnum;
        this.pred = pred;
        this.succ = succ;
    };
    var succ = function (dict) {
        return dict.succ;
    };
    var runCardinality = function (_196) {
        return _196;
    };
    var tupleCardinality = function (__dict_Enum_91) {
        return function (__dict_Enum_92) {
            return function (l) {
                return function (r) {
                    return Cardinality.create(runCardinality(l) * runCardinality(r));
                };
            };
        };
    };
    var pred = function (dict) {
        return dict.pred;
    };
    var maybeCardinality = function (__dict_Enum_93) {
        return function (c) {
            return Cardinality.create(1 + runCardinality(c));
        };
    };
    var lastEnum = function (dict) {
        return dict.lastEnum;
    };
    var fromEnum = function (__dict_Enum_94) {
        return function (e) {
            return Data_Maybe.maybe(0)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["+"](Prelude.numNumber)(1))(fromEnum(__dict_Enum_94)))(pred(__dict_Enum_94)(e));
        };
    };
    var firstEnum = function (dict) {
        return dict.firstEnum;
    };
    var toEnum = function (__dict_Enum_95) {
        return function (_197) {
            if (_197 < 0) {
                return Data_Maybe.Nothing.value;
            };
            if (_197 === 0) {
                return new Data_Maybe.Just(firstEnum(__dict_Enum_95));
            };
            return Prelude[">>="](Data_Maybe.bindMaybe)(toEnum(__dict_Enum_95)(_197 - 1))(succ(__dict_Enum_95));
        };
    };
    var enumChar = new Enum(function () {
        return Data_Char.ordChar;
    }, 65535 + 1, Data_Char.fromCharCode(0), Data_Char.fromCharCode(65535), function (c) {
        return Prelude["=="](Data_Char.eqChar)(c)(firstEnum(enumChar)) ? Data_Maybe.Nothing.value : Data_Maybe.Just.create(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Char.fromCharCode)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["+"](Prelude.numNumber)(-1))(Data_Char.toCharCode))(c));
    }, function (c) {
        return Prelude["=="](Data_Char.eqChar)(c)(lastEnum(enumChar)) ? Data_Maybe.Nothing.value : Data_Maybe.Just.create(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Char.fromCharCode)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["+"](Prelude.numNumber)(1))(Data_Char.toCharCode))(c));
    });
    var enumBoolean = new Enum(function () {
        return Prelude.ordBoolean;
    }, 2, false, true, function (_201) {
        if (_201) {
            return new Data_Maybe.Just(false);
        };
        return Data_Maybe.Nothing.value;
    }, function (_200) {
        if (!_200) {
            return new Data_Maybe.Just(true);
        };
        return Data_Maybe.Nothing.value;
    });
    var eitherCardinality = function (__dict_Enum_96) {
        return function (__dict_Enum_97) {
            return function (l) {
                return function (r) {
                    return Cardinality.create(runCardinality(l) + runCardinality(r));
                };
            };
        };
    };
    var cardinality = function (dict) {
        return dict.cardinality;
    };
    var enumEither = function (__dict_Enum_98) {
        return function (__dict_Enum_99) {
            return new Enum(function () {
                return Data_Either.ordEither(__dict_Enum_98["__superclass_Prelude.Ord_0"]())(__dict_Enum_99["__superclass_Prelude.Ord_0"]());
            }, eitherCardinality(__dict_Enum_98)(__dict_Enum_99)(cardinality(__dict_Enum_98))(cardinality(__dict_Enum_99)), new Data_Either.Left(firstEnum(__dict_Enum_98)), new Data_Either.Right(lastEnum(__dict_Enum_99)), function (_205) {
                if (_205 instanceof Data_Either.Left) {
                    return Data_Maybe.maybe(Data_Maybe.Nothing.value)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Either.Left.create))(pred(__dict_Enum_98)(_205.value0));
                };
                if (_205 instanceof Data_Either.Right) {
                    return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Left(lastEnum(__dict_Enum_98))))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Either.Right.create))(pred(__dict_Enum_99)(_205.value0));
                };
                throw new Error("Failed pattern match");
            }, function (_204) {
                if (_204 instanceof Data_Either.Left) {
                    return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Right(firstEnum(__dict_Enum_99))))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Either.Left.create))(succ(__dict_Enum_98)(_204.value0));
                };
                if (_204 instanceof Data_Either.Right) {
                    return Data_Maybe.maybe(Data_Maybe.Nothing.value)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Either.Right.create))(succ(__dict_Enum_99)(_204.value0));
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var enumMaybe = function (__dict_Enum_100) {
        return new Enum(function () {
            return Data_Maybe.ordMaybe(__dict_Enum_100["__superclass_Prelude.Ord_0"]());
        }, maybeCardinality(__dict_Enum_100)(cardinality(__dict_Enum_100)), Data_Maybe.Nothing.value, Data_Maybe.Just.create(lastEnum(__dict_Enum_100)), function (_199) {
            if (_199 instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (_199 instanceof Data_Maybe.Just) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(pred(__dict_Enum_100)(_199.value0));
            };
            throw new Error("Failed pattern match");
        }, function (_198) {
            if (_198 instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Just.create(firstEnum(enumMaybe(__dict_Enum_100)));
            };
            if (_198 instanceof Data_Maybe.Just) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(__dict_Enum_100)(_198.value0));
            };
            throw new Error("Failed pattern match");
        });
    };
    var enumTuple = function (__dict_Enum_101) {
        return function (__dict_Enum_102) {
            return new Enum(function () {
                return Data_Tuple.ordTuple(__dict_Enum_101["__superclass_Prelude.Ord_0"]())(__dict_Enum_102["__superclass_Prelude.Ord_0"]());
            }, tupleCardinality(__dict_Enum_101)(__dict_Enum_102)(cardinality(__dict_Enum_101))(cardinality(__dict_Enum_102)), new Data_Tuple.Tuple(firstEnum(__dict_Enum_101), firstEnum(__dict_Enum_102)), new Data_Tuple.Tuple(lastEnum(__dict_Enum_101), lastEnum(__dict_Enum_102)), function (_203) {
                return Data_Maybe.maybe(Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude.flip(Data_Tuple.Tuple.create)(firstEnum(__dict_Enum_102)))(pred(__dict_Enum_101)(_203.value0)))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Tuple.Tuple.create(_203.value0)))(pred(__dict_Enum_102)(_203.value1));
            }, function (_202) {
                return Data_Maybe.maybe(Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude.flip(Data_Tuple.Tuple.create)(firstEnum(__dict_Enum_102)))(succ(__dict_Enum_101)(_202.value0)))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Tuple.Tuple.create(_202.value0)))(succ(__dict_Enum_102)(_202.value1));
            });
        };
    };
    return {
        Cardinality: Cardinality, 
        Enum: Enum, 
        cardinality: cardinality, 
        enumBoolean: enumBoolean, 
        enumChar: enumChar, 
        enumEither: enumEither, 
        enumMaybe: enumMaybe, 
        enumTuple: enumTuple, 
        firstEnum: firstEnum, 
        fromEnum: fromEnum, 
        lastEnum: lastEnum, 
        pred: pred, 
        runCardinality: runCardinality, 
        succ: succ, 
        toEnum: toEnum
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var con9 = function (f) {
        return function (_213) {
            return f(_213.value0)(_213.value1.value0)(_213.value1.value1.value0)(_213.value1.value1.value1.value0)(_213.value1.value1.value1.value1.value0)(_213.value1.value1.value1.value1.value1.value0)(_213.value1.value1.value1.value1.value1.value1.value0)(_213.value1.value1.value1.value1.value1.value1.value1.value0)(_213.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con8 = function (f) {
        return function (_212) {
            return f(_212.value0)(_212.value1.value0)(_212.value1.value1.value0)(_212.value1.value1.value1.value0)(_212.value1.value1.value1.value1.value0)(_212.value1.value1.value1.value1.value1.value0)(_212.value1.value1.value1.value1.value1.value1.value0)(_212.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con7 = function (f) {
        return function (_211) {
            return f(_211.value0)(_211.value1.value0)(_211.value1.value1.value0)(_211.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value1);
        };
    };
    var con6 = function (f) {
        return function (_210) {
            return f(_210.value0)(_210.value1.value0)(_210.value1.value1.value0)(_210.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value1);
        };
    };
    var con5 = function (f) {
        return function (_209) {
            return f(_209.value0)(_209.value1.value0)(_209.value1.value1.value0)(_209.value1.value1.value1.value0)(_209.value1.value1.value1.value1);
        };
    };
    var con4 = function (f) {
        return function (_208) {
            return f(_208.value0)(_208.value1.value0)(_208.value1.value1.value0)(_208.value1.value1.value1);
        };
    };
    var con3 = function (f) {
        return function (_207) {
            return f(_207.value0)(_207.value1.value0)(_207.value1.value1);
        };
    };
    var con2 = function (f) {
        return function (_206) {
            return f(_206.value0)(_206.value1);
        };
    };
    var con10 = function (f) {
        return function (_214) {
            return f(_214.value0)(_214.value1.value0)(_214.value1.value1.value0)(_214.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value1.value1.value1.value1.value0)(_214.value1.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    return {
        "/\\": $div$bslash, 
        con10: con10, 
        con2: con2, 
        con3: con3, 
        con4: con4, 
        con5: con5, 
        con6: con6, 
        con7: con7, 
        con8: con8, 
        con9: con9
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = {
        create: function (value) {
            return value;
        }
    };
    var showFirst = function (__dict_Show_103) {
        return new Prelude.Show(function (_222) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_103))(_222) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_223) {
        return function (_224) {
            if (_223 instanceof Data_Maybe.Just) {
                return _223;
            };
            return _224;
        };
    });
    var runFirst = function (_215) {
        return _215;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var eqFirst = function (__dict_Eq_105) {
        return new Prelude.Eq(function (_218) {
            return function (_219) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_105))(_218)(_219);
            };
        }, function (_216) {
            return function (_217) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_105))(_216)(_217);
            };
        });
    };
    var ordFirst = function (__dict_Ord_104) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_104["__superclass_Prelude.Eq_0"]());
        }, function (_220) {
            return function (_221) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_104))(_220)(_221);
            };
        });
    };
    return {
        First: First, 
        eqFirst: eqFirst, 
        monoidFirst: monoidFirst, 
        ordFirst: ordFirst, 
        runFirst: runFirst, 
        semigroupFirst: semigroupFirst, 
        showFirst: showFirst
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Monoid_First = PS.Data_Monoid_First;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    function foldrArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = xs.length - 1; i >= 0; --i) {        acc = f(xs[i])(acc);      }      return acc;    }  }};
    function foldlArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = 0, len = xs.length; i < len; ++i) {        acc = f(acc)(xs[i]);      }      return acc;    }  }};
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_106) {
        return function (__dict_Foldable_107) {
            return function (f) {
                return foldr(__dict_Foldable_107)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_106["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_106)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_108) {
        return function (__dict_Foldable_109) {
            return Prelude.flip(traverse_(__dict_Applicative_108)(__dict_Foldable_109));
        };
    };
    var sequence_ = function (__dict_Applicative_110) {
        return function (__dict_Foldable_111) {
            return traverse_(__dict_Applicative_110)(__dict_Foldable_111)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_112) {
        return function (__dict_Monoid_113) {
            return function (sep) {
                return function (xs) {
                    var go = function (_258) {
                        return function (_259) {
                            if (_258.init) {
                                return {
                                    init: false, 
                                    acc: _259
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_113["__superclass_Prelude.Semigroup_0"]())(_258.acc)(Prelude["<>"](__dict_Monoid_113["__superclass_Prelude.Semigroup_0"]())(sep)(_259))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_112)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_113)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_114) {
        return function (__dict_Monoid_115) {
            return foldl(__dict_Foldable_114)(Prelude["<>"](__dict_Monoid_115["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_115));
        };
    };
    var or = function (__dict_Foldable_116) {
        return foldl(__dict_Foldable_116)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_117) {
        return foldl(__dict_Foldable_117)(Prelude["*"](Prelude.numNumber))(1);
    };
    var sum = function (__dict_Foldable_118) {
        return foldl(__dict_Foldable_118)(Prelude["+"](Prelude.numNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_119) {
        return function (_256) {
            return function (_257) {
                return _256(_257.value1);
            };
        };
    }, function (_253) {
        return function (_254) {
            return function (_255) {
                return _253(_254)(_255.value1);
            };
        };
    }, function (_250) {
        return function (_251) {
            return function (_252) {
                return _250(_252.value1)(_251);
            };
        };
    });
    var foldableRef = new Foldable(function (__dict_Monoid_120) {
        return function (_248) {
            return function (_249) {
                return _248(_249);
            };
        };
    }, function (_245) {
        return function (_246) {
            return function (_247) {
                return _245(_246)(_247);
            };
        };
    }, function (_242) {
        return function (_243) {
            return function (_244) {
                return _242(_244)(_243);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_121) {
        return function (_240) {
            return function (_241) {
                if (_241 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_121);
                };
                if (_241 instanceof Data_Maybe.Just) {
                    return _240(_241.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_237) {
        return function (_238) {
            return function (_239) {
                if (_239 instanceof Data_Maybe.Nothing) {
                    return _238;
                };
                if (_239 instanceof Data_Maybe.Just) {
                    return _237(_238)(_239.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_234) {
        return function (_235) {
            return function (_236) {
                if (_236 instanceof Data_Maybe.Nothing) {
                    return _235;
                };
                if (_236 instanceof Data_Maybe.Just) {
                    return _234(_236.value0)(_235);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_122) {
        return function (_232) {
            return function (_233) {
                if (_233 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_122);
                };
                if (_233 instanceof Data_Either.Right) {
                    return _232(_233.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_229) {
        return function (_230) {
            return function (_231) {
                if (_231 instanceof Data_Either.Left) {
                    return _230;
                };
                if (_231 instanceof Data_Either.Right) {
                    return _229(_230)(_231.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_226) {
        return function (_227) {
            return function (_228) {
                if (_228 instanceof Data_Either.Left) {
                    return _227;
                };
                if (_228 instanceof Data_Either.Right) {
                    return _226(_228.value0)(_227);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_123) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_123["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_123))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var lookup = function (__dict_Eq_124) {
        return function (__dict_Foldable_125) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_125)(Data_Monoid_First.monoidFirst)(function (_225) {
                        return Prelude["=="](__dict_Eq_124)(a)(_225.value0) ? new Data_Maybe.Just(_225.value1) : Data_Maybe.Nothing.value;
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_126) {
        return function (__dict_Monoid_127) {
            return foldMap(__dict_Foldable_126)(__dict_Monoid_127)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_128) {
        return function (p) {
            return function (f) {
                var _808 = foldMap(__dict_Foldable_128)(Data_Monoid.monoidArray)(function (x) {
                    return p(x) ? [ x ] : [  ];
                })(f);
                if (_808.length >= 1) {
                    var _810 = _808.slice(1);
                    return new Data_Maybe.Just(_808[0]);
                };
                if (_808.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_129) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_129)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_130) {
        return function (__dict_Foldable_131) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_131))(Prelude["=="](__dict_Eq_130));
        };
    };
    var notElem = function (__dict_Eq_132) {
        return function (__dict_Foldable_133) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_132)(__dict_Foldable_133)(x));
            };
        };
    };
    var and = function (__dict_Foldable_134) {
        return foldl(__dict_Foldable_134)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_135) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_135)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        all: all, 
        and: and, 
        any: any, 
        elem: elem, 
        find: find, 
        fold: fold, 
        foldMap: foldMap, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableRef: foldableRef, 
        foldableTuple: foldableTuple, 
        foldl: foldl, 
        foldlArray: foldlArray, 
        foldr: foldr, 
        foldrArray: foldrArray, 
        for_: for_, 
        intercalate: intercalate, 
        lookup: lookup, 
        mconcat: mconcat, 
        notElem: notElem, 
        or: or, 
        product: product, 
        sequence_: sequence_, 
        sum: sum, 
        traverse_: traverse_
    };
})();
var PS = PS || {};
PS.Data_Array_NonEmpty = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array_Unsafe = PS.Data_Array_Unsafe;
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    
  function pop_(l) {
    if(l.length == 0) return l;
    var l1 = l.slice();
    l1.pop(); 
    return l1;
  }
  ;
    var $colon$bar = function (a) {
        return function (as) {
            return new NonEmpty(a, as);
        };
    };
    var $bang$bang = function (_273) {
        return function (_274) {
            if (_274 === 0) {
                return new Data_Maybe.Just(_273.value0);
            };
            return Data_Array["!!"](_273.value1)(_274 - 1);
        };
    };
    var toArray = function (_260) {
        return Prelude[":"](_260.value0)(_260.value1);
    };
    var $less$bar = function (a) {
        return function (as) {
            return $colon$bar(a)(toArray(as));
        };
    };
    var take = function (_266) {
        return function (_267) {
            if (_266 === 0) {
                return [  ];
            };
            if (_266 === 1) {
                return [ _267.value0 ];
            };
            return Prelude[":"](_267.value0)(Data_Array.take(_266 - 1)(_267.value1));
        };
    };
    var tail = function (_263) {
        return _263.value1;
    };
    var singleton = function (a) {
        return new NonEmpty(a, [  ]);
    };
    var showNonEmpty = function (__dict_Show_136) {
        return new Prelude.Show(function (_281) {
            return Prelude.show(__dict_Show_136)(_281.value0) + (" :| " + Prelude.show(Prelude.showArray(__dict_Show_136))(_281.value1));
        });
    };
    var reducer = function (_277) {
        return function (_278) {
            return Data_Foldable.foldrArray(_277)(_278.value0)(_278.value1);
        };
    };
    var reducel = function (_279) {
        return function (_280) {
            return Data_Foldable.foldlArray(_279)(_280.value0)(_280.value1);
        };
    };
    var pop = function (_265) {
        if (_265.value1.length === 0) {
            return [  ];
        };
        return Prelude[":"](_265.value0)(pop_(_265.value1));
    };
    var map = function (_270) {
        return function (_271) {
            return $colon$bar(_270(_271.value0))(Data_Array.map(_270)(_271.value1));
        };
    };
    var length = function (_261) {
        return 1 + Data_Array.length(_261.value1);
    };
    var last = function (_264) {
        if (_264.value1.length === 0) {
            return _264.value0;
        };
        return Data_Array_Unsafe.last(_264.value1);
    };
    var head = function (_262) {
        return _262.value0;
    };
    var functorNonEmpty = new Prelude.Functor(map);
    var fromArray_ = function (_272) {
        if (_272.length >= 1) {
            var _862 = _272.slice(1);
            return $colon$bar(_272[0])(_862);
        };
        throw new Error("Failed pattern match");
    };
    var reverse = function (as) {
        return fromArray_(Data_Array.reverse(toArray(as)));
    };
    var filter = function (p) {
        return function (as) {
            return Data_Array.filter(p)(toArray(as));
        };
    };
    var eqNonEmpty = function (__dict_Eq_137) {
        return new Prelude.Eq(function (l) {
            return function (r) {
                return !Prelude["=="](eqNonEmpty(__dict_Eq_137))(l)(r);
            };
        }, function (_282) {
            return function (_283) {
                return Prelude["=="](__dict_Eq_137)(_282.value0)(_283.value0) && Prelude["=="](Prelude.eqArray(__dict_Eq_137))(_282.value1)(_283.value1);
            };
        });
    };
    var drop = function (_268) {
        return function (_269) {
            if (_268 === 0) {
                return toArray(_269);
            };
            if (_268 === 1) {
                return _269.value1;
            };
            return Data_Array.drop(_268 - 1)(_269.value1);
        };
    };
    var concatMap = function (f) {
        return function (as) {
            var g = function (a) {
                return toArray(f(a));
            };
            return fromArray_(Data_Array.concatMap(g)(toArray(as)));
        };
    };
    var applyNonEmpty = new Prelude.Apply(function (x) {
        return function (y) {
            return fromArray_(Prelude["<*>"](Data_Array.applyArray)(toArray(x))(toArray(y)));
        };
    }, function () {
        return functorNonEmpty;
    });
    var bindNonEmpty = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyNonEmpty;
    });
    var apply = function (f) {
        return function (as) {
            return fromArray_(f(toArray(as)));
        };
    };
    var nub = function (__dict_Eq_138) {
        return apply(Data_Array.nub(__dict_Eq_138));
    };
    var nubBy = function (f) {
        return apply(Data_Array.nubBy(f));
    };
    var applicativeNonEmpty = new Prelude.Applicative(function () {
        return applyNonEmpty;
    }, singleton);
    var monadNonEmpty = new Prelude.Monad(function () {
        return applicativeNonEmpty;
    }, function () {
        return bindNonEmpty;
    });
    var append = function (_275) {
        return function (_276) {
            return $colon$bar(_275.value0)(Data_Array.append(_275.value1)(toArray(_276)));
        };
    };
    var semigroupNonEmpty = new Prelude.Semigroup(append);
    return {
        "!!": $bang$bang, 
        ":|": $colon$bar, 
        "<|": $less$bar, 
        NonEmpty: NonEmpty, 
        append: append, 
        applicativeNonEmpty: applicativeNonEmpty, 
        applyNonEmpty: applyNonEmpty, 
        bindNonEmpty: bindNonEmpty, 
        concatMap: concatMap, 
        drop: drop, 
        eqNonEmpty: eqNonEmpty, 
        filter: filter, 
        functorNonEmpty: functorNonEmpty, 
        head: head, 
        last: last, 
        length: length, 
        map: map, 
        monadNonEmpty: monadNonEmpty, 
        nub: nub, 
        nubBy: nubBy, 
        pop: pop, 
        reducel: reducel, 
        reducer: reducer, 
        reverse: reverse, 
        semigroupNonEmpty: semigroupNonEmpty, 
        showNonEmpty: showNonEmpty, 
        singleton: singleton, 
        tail: tail, 
        take: take, 
        toArray: toArray
    };
})();
var PS = PS || {};
PS.Data_Array_NonEmpty_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array_NonEmpty = PS.Data_Array_NonEmpty;
    var fromArray = function (_284) {
        if (_284.length >= 1) {
            var _881 = _284.slice(1);
            return Data_Array_NonEmpty[":|"](_284[0])(_881);
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromArray: fromArray
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = {
        create: function (value) {
            return value;
        }
    };
    var showLast = function (__dict_Show_139) {
        return new Prelude.Show(function (_292) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_139))(_292) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (_293) {
        return function (_294) {
            if (_294 instanceof Data_Maybe.Just) {
                return _294;
            };
            if (_294 instanceof Data_Maybe.Nothing) {
                return _293;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_285) {
        return _285;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var eqLast = function (__dict_Eq_141) {
        return new Prelude.Eq(function (_288) {
            return function (_289) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_141))(_288)(_289);
            };
        }, function (_286) {
            return function (_287) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_141))(_286)(_287);
            };
        });
    };
    var ordLast = function (__dict_Ord_140) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_140["__superclass_Prelude.Eq_0"]());
        }, function (_290) {
            return function (_291) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_140))(_290)(_291);
            };
        });
    };
    return {
        Last: Last, 
        eqLast: eqLast, 
        monoidLast: monoidLast, 
        ordLast: ordLast, 
        runLast: runLast, 
        semigroupLast: semigroupLast, 
        showLast: showLast
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    var Data_Function = PS.Data_Function;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;
    
    function fromCharArray(a) {
      return a.join('');
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;
    
    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function toCharArray(s) {
      return s.split('');
    }
    ;
    
    function toLower(s) {
      return s.toLowerCase();
    }
    ;
    
    function toUpper(s) {
      return s.toUpperCase();
    }
    ;
    
    function trim(s) {
      return s.trim();
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    var fromChar = Data_Char.charString;
    var charCodeAt = function (n) {
        return function (s) {
            return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt, 
        drop: drop, 
        fromChar: fromChar, 
        fromCharArray: fromCharArray, 
        indexOf: indexOf, 
        "indexOf'": indexOf$prime, 
        joinWith: joinWith, 
        lastIndexOf: lastIndexOf, 
        "lastIndexOf'": lastIndexOf$prime, 
        length: length, 
        localeCompare: localeCompare, 
        replace: replace, 
        split: split, 
        take: take, 
        toCharArray: toCharArray, 
        toLower: toLower, 
        toUpper: toUpper, 
        trim: trim
    };
})();
var PS = PS || {};
PS.Data_String_Regex = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Data_Function = PS.Data_Function;
    var Data_Maybe = PS.Data_Maybe;
    
  function showRegex$prime(r) {
    return '' + r;
  }
  ;
    
  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;
    
  function source(r) {
    return r.source;
  }
  ;
    
  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;
    
  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;
    
  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;
    
  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;
    
  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;
    
  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;
    
  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
    var showRegex = new Prelude.Show(showRegex$prime);
    var renderFlags = function (flags_1) {
        return (flags_1.global ? "g" : "") + ((flags_1.ignoreCase ? "i" : "") + ((flags_1.multiline ? "m" : "") + ((flags_1.sticky ? "y" : "") + (flags_1.unicode ? "u" : ""))));
    };
    var regex = function (source_1) {
        return function (flags_1) {
            return regex$prime(source_1)(renderFlags(flags_1));
        };
    };
    var parseFlags = function (s) {
        return {
            global: Data_String.indexOf("g")(s) >= 0, 
            ignoreCase: Data_String.indexOf("i")(s) >= 0, 
            multiline: Data_String.indexOf("m")(s) >= 0, 
            sticky: Data_String.indexOf("y")(s) >= 0, 
            unicode: Data_String.indexOf("u")(s) >= 0
        };
    };
    var match = function (r) {
        return function (s) {
            return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        flags: flags, 
        match: match, 
        parseFlags: parseFlags, 
        regex: regex, 
        renderFlags: renderFlags, 
        replace: replace, 
        "replace'": replace$prime, 
        search: search, 
        showRegex: showRegex, 
        source: source, 
        split: split, 
        test: test
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Data_Tuple = PS.Data_Tuple;
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Array = PS.Data_Array;
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_143) {
        return function (_309) {
            return Prelude["<$>"]((__dict_Applicative_143["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_309.value0))(_309.value1);
        };
    }, function (__dict_Applicative_142) {
        return function (_307) {
            return function (_308) {
                return Prelude["<$>"]((__dict_Applicative_142["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_308.value0))(_307(_308.value1));
            };
        };
    });
    var traversableRef = new Traversable(function () {
        return Data_Foldable.foldableRef;
    }, function () {
        return Data_Eq.functorRef;
    }, function (__dict_Applicative_145) {
        return function (_303) {
            return Prelude["<$>"]((__dict_Applicative_145["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_303);
        };
    }, function (__dict_Applicative_144) {
        return function (_301) {
            return function (_302) {
                return Prelude["<$>"]((__dict_Applicative_144["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_301(_302));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_147) {
        return function (_306) {
            if (_306 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_147)(Data_Maybe.Nothing.value);
            };
            if (_306 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_147["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_306.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_146) {
        return function (_304) {
            return function (_305) {
                if (_305 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_146)(Data_Maybe.Nothing.value);
                };
                if (_305 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_146["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_304(_305.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_149) {
        return function (_300) {
            if (_300 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_149)(new Data_Either.Left(_300.value0));
            };
            if (_300 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_149["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_300.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_148) {
        return function (_298) {
            return function (_299) {
                if (_299 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_148)(new Data_Either.Left(_299.value0));
                };
                if (_299 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_148["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_298(_299.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_151) {
        return function (_297) {
            if (_297.length === 0) {
                return Prelude.pure(__dict_Applicative_151)([  ]);
            };
            if (_297.length >= 1) {
                var _917 = _297.slice(1);
                return Prelude["<*>"](__dict_Applicative_151["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_151["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_297[0]))(sequence(traversableArray)(__dict_Applicative_151)(_917));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_150) {
        return function (_295) {
            return function (_296) {
                if (_296.length === 0) {
                    return Prelude.pure(__dict_Applicative_150)([  ]);
                };
                if (_296.length >= 1) {
                    var _921 = _296.slice(1);
                    return Prelude["<*>"](__dict_Applicative_150["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_150["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_295(_296[0])))(traverse(traversableArray)(__dict_Applicative_150)(_295)(_921));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var zipWithA = function (__dict_Applicative_152) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_152)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var $$for = function (__dict_Applicative_153) {
        return function (__dict_Traversable_154) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_154)(__dict_Applicative_153)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        sequence: sequence, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableRef: traversableRef, 
        traversableTuple: traversableTuple, 
        traverse: traverse, 
        zipWithA: zipWithA
    };
})();
var PS = PS || {};
PS.Test_QuickCheck_Gen = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Math = PS.Math;
    var Data_Monoid_Sum = PS.Data_Monoid_Sum;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Traversable = PS.Data_Traversable;
    var Debug_Trace = PS.Debug_Trace;
    function Gen(value0) {
        this.value0 = value0;
    };
    Gen.create = function (value0) {
        return new Gen(value0);
    };
    function float32ToInt32(n) {  var arr = new ArrayBuffer(4);  var fv = new Float32Array(arr);  var iv = new Int32Array(arr);  fv[0] = n;  return iv[0];};
    var runGen = function (_310) {
        return _310.value0;
    };
    var stateful = function (f) {
        return new Gen(function (s) {
            return runGen(f(s))(s);
        });
    };
    var sized = function (f) {
        return stateful(function (s) {
            return f(s.size);
        });
    };
    var variant = function (n) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _924 = {};
                    for (var _925 in s) {
                        if (s.hasOwnProperty(_925)) {
                            _924[_925] = s[_925];
                        };
                    };
                    _924.newSeed = n;
                    return _924;
                })());
            });
        };
    };
    var resize = function (sz) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _926 = {};
                    for (var _927 in s) {
                        if (s.hasOwnProperty(_927)) {
                            _926[_927] = s[_927];
                        };
                    };
                    _926.size = sz;
                    return _926;
                })());
            });
        };
    };
    var repeatable = function (f) {
        return Gen.create(function (s) {
            return {
                value: function (a) {
                    return (runGen(f(a))(s)).value;
                }, 
                state: s
            };
        });
    };
    var lcgN = 1 << 30;
    var lcgM = 1103515245;
    var lcgC = 12345;
    var lcgNext = function (n) {
        return (lcgM * n + lcgC) % lcgN;
    };
    var lcgStep = (function () {
        var f = function (s) {
            return {
                value: s.newSeed, 
                state: (function () {
                    var _928 = {};
                    for (var _929 in s) {
                        if (s.hasOwnProperty(_929)) {
                            _928[_929] = s[_929];
                        };
                    };
                    _928.newSeed = lcgNext(s.newSeed);
                    return _928;
                })()
            };
        };
        return new Gen(f);
    })();
    var perturbGen = function (_311) {
        return function (_312) {
            return Gen.create(function (s) {
                return _312.value0((function () {
                    var _932 = {};
                    for (var _933 in s) {
                        if (s.hasOwnProperty(_933)) {
                            _932[_933] = s[_933];
                        };
                    };
                    _932.newSeed = lcgNext(float32ToInt32(_311)) + s.newSeed;
                    return _932;
                })());
            });
        };
    };
    var functorGen = new Prelude.Functor(function (_316) {
        return function (_317) {
            return Gen.create(function (s) {
                var _937 = _317.value0(s);
                return {
                    value: _316(_937.value), 
                    state: _937.state
                };
            });
        };
    });
    var uniform = Prelude["<$>"](functorGen)(function (n) {
        return n / (1 << 30);
    })(lcgStep);
    var evalGen = function (gen) {
        return function (st) {
            return (runGen(gen)(st)).value;
        };
    };
    var choose = function (a) {
        return function (b) {
            var min = Math.min(a)(b);
            var max = Math.max(a)(b);
            return Prelude["<$>"](functorGen)(Prelude[">>>"](Prelude.semigroupoidArr)(Prelude["*"](Prelude.numNumber)(max - min))(Prelude["+"](Prelude.numNumber)(min)))(uniform);
        };
    };
    var chooseInt = function (a) {
        return function (b) {
            return Prelude["<$>"](functorGen)(Math.floor)(choose(Math.ceil(a))(Math.floor(b) + 0.9999999989999999));
        };
    };
    var applyGen = new Prelude.Apply(function (_318) {
        return function (_319) {
            return Gen.create(function (s) {
                var _943 = _318.value0(s);
                var _944 = _319.value0(_943.state);
                return {
                    value: _943.value(_944.value), 
                    state: _944.state
                };
            });
        };
    }, function () {
        return functorGen;
    });
    var bindGen = new Prelude.Bind(function (_320) {
        return function (_321) {
            return Gen.create(function (s) {
                var _953 = _320.value0(s);
                return runGen(_321(_953.value))(_953.state);
            });
        };
    }, function () {
        return applyGen;
    });
    var frequency = function (x) {
        return function (xs) {
            var xxs = Prelude[":"](x)(xs);
            var total = Data_Monoid_Sum.runSum(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid_Sum.monoidSum)(Prelude["<$>"](Data_Array.functorArray)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Monoid_Sum.Sum.create)(Data_Tuple.fst))(xxs)));
            var pick = function (_313) {
                return function (_314) {
                    return function (_315) {
                        if (_315.length === 0) {
                            return _314;
                        };
                        if (_315.length >= 1) {
                            var _963 = _315.slice(1);
                            return _313 <= (_315[0]).value0 ? (_315[0]).value1 : pick(_313 - (_315[0]).value0)(_314)(_963);
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return Prelude[">>="](bindGen)(chooseInt(1)(total))(function (_6) {
                return pick(_6)(Data_Tuple.snd(x))(xxs);
            });
        };
    };
    var oneOf = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_5) {
                return _5 === 0 ? x : Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_5 - 1));
            });
        };
    };
    var applicativeGen = new Prelude.Applicative(function () {
        return applyGen;
    }, function (a) {
        return new Gen(function (s) {
            return {
                value: a, 
                state: s
            };
        });
    });
    var elements = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_11) {
                return Prelude.pure(applicativeGen)(_11 === 0 ? x : Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_11 - 1)));
            });
        };
    };
    var monadGen = new Prelude.Monad(function () {
        return applicativeGen;
    }, function () {
        return bindGen;
    });
    var vectorOf = function (k) {
        return function (g) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeGen)(Prelude["<$>"](Data_Array.functorArray)(Prelude["const"](g))(Data_Array.range(1)(k)));
        };
    };
    var arrayOf = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_7) {
                return vectorOf(_7)(g);
            });
        });
    };
    var arrayOf1 = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_10) {
                return Prelude[">>="](bindGen)(g)(function (_9) {
                    return Prelude[">>="](bindGen)(vectorOf(_10 - 1)(g))(function (_8) {
                        return Prelude["return"](monadGen)(new Data_Tuple.Tuple(_9, _8));
                    });
                });
            });
        });
    };
    var sample = function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: 0, 
                size: sz
            });
        };
    };
    var showSample$prime = function (__dict_Show_155) {
        return function (n) {
            return function (g) {
                return Debug_Trace.print(Prelude.showArray(__dict_Show_155))(sample(n)(g));
            };
        };
    };
    var showSample = function (__dict_Show_156) {
        return showSample$prime(__dict_Show_156)(10);
    };
    return {
        applicativeGen: applicativeGen, 
        applyGen: applyGen, 
        arrayOf: arrayOf, 
        arrayOf1: arrayOf1, 
        bindGen: bindGen, 
        choose: choose, 
        chooseInt: chooseInt, 
        elements: elements, 
        evalGen: evalGen, 
        frequency: frequency, 
        functorGen: functorGen, 
        monadGen: monadGen, 
        oneOf: oneOf, 
        perturbGen: perturbGen, 
        repeatable: repeatable, 
        resize: resize, 
        runGen: runGen, 
        showSample: showSample, 
        "showSample'": showSample$prime, 
        sized: sized, 
        stateful: stateful, 
        uniform: uniform, 
        variant: variant, 
        vectorOf: vectorOf
    };
})();
var PS = PS || {};
PS.Test_QuickCheck = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Test_QuickCheck_Gen = PS.Test_QuickCheck_Gen;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Debug_Trace = PS.Debug_Trace;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Char = PS.Data_Char;
    var Data_Array = PS.Data_Array;
    var Data_String = PS.Data_String;
    var Math = PS.Math;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    function Success() {

    };
    Success.value = new Success();
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    var AlphaNumString = {
        create: function (value) {
            return value;
        }
    };
    function Arbitrary(arbitrary) {
        this.arbitrary = arbitrary;
    };
    function CoArbitrary(coarbitrary) {
        this.coarbitrary = coarbitrary;
    };
    function Testable(test) {
        this.test = test;
    };
    var $less$qmark$greater = function (_322) {
        return function (_323) {
            if (_322) {
                return Success.value;
            };
            if (!_322) {
                return new Failed(_323);
            };
            throw new Error("Failed pattern match");
        };
    };
    var testableResult = new Testable(Prelude["return"](Test_QuickCheck_Gen.monadGen));
    var testableBoolean = new Testable(function (_331) {
        if (_331) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Success.value);
        };
        if (!_331) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(new Failed("Test returned false"));
        };
        throw new Error("Failed pattern match");
    });
    var test = function (dict) {
        return dict.test;
    };
    var showResult = new Prelude.Show(function (_324) {
        if (_324 instanceof Success) {
            return "Success";
        };
        if (_324 instanceof Failed) {
            return "Failed: " + _324.value0;
        };
        throw new Error("Failed pattern match");
    });
    var quickCheckPure = function (__dict_Testable_157) {
        return function (s) {
            var quickCheckPure$prime = function (st) {
                return function (n) {
                    return function (prop) {
                        var go = function (_332) {
                            if (_332 <= 0) {
                                return Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]);
                            };
                            return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(test(__dict_Testable_157)(prop))(function (_22) {
                                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(go(_332 - 1))(function (_21) {
                                    return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_22)(_21));
                                });
                            });
                        };
                        return Test_QuickCheck_Gen.evalGen(go(n))(st);
                    };
                };
            };
            return quickCheckPure$prime({
                newSeed: s, 
                size: 10
            });
        };
    };
    var quickCheck$prime = function (__dict_Testable_158) {
        return function (n) {
            return function (prop) {
                var throwOnFirstFailure = function (__copy__333) {
                    return function (__copy__334) {
                        var _333 = __copy__333;
                        var _334 = __copy__334;
                        tco: while (true) {
                            if (_334.length === 0) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                            };
                            if (_334.length >= 1) {
                                var _983 = _334.slice(1);
                                if (_334[0] instanceof Failed) {
                                    return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showNumber)(_333) + (" failed: \n" + (_334[0]).value0))));
                                };
                            };
                            if (_334.length >= 1) {
                                var _985 = _334.slice(1);
                                var __tco__333 = _333 + 1;
                                _333 = __tco__333;
                                _334 = _985;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                var countSuccesses = function (_335) {
                    if (_335.length === 0) {
                        return 0;
                    };
                    if (_335.length >= 1) {
                        var _988 = _335.slice(1);
                        if (_335[0] instanceof Success) {
                            return 1 + countSuccesses(_988);
                        };
                    };
                    if (_335.length >= 1) {
                        var _990 = _335.slice(1);
                        return countSuccesses(_990);
                    };
                    throw new Error("Failed pattern match");
                };
                return function __do() {
                    var _23 = Control_Monad_Eff_Random.random();
                    return (function () {
                        var results = quickCheckPure(__dict_Testable_158)(_23)(n)(prop);
                        var successes = countSuccesses(results);
                        return function __do() {
                            Debug_Trace.trace(Prelude.show(Prelude.showNumber)(successes) + ("/" + (Prelude.show(Prelude.showNumber)(n) + " test(s) passed.")))();
                            return throwOnFirstFailure(1)(results)();
                        };
                    })()();
                };
            };
        };
    };
    var quickCheck = function (__dict_Testable_159) {
        return function (prop) {
            return quickCheck$prime(__dict_Testable_159)(100)(prop);
        };
    };
    var coarbitrary = function (dict) {
        return dict.coarbitrary;
    };
    var coarbTuple = function (__dict_CoArbitrary_160) {
        return function (__dict_CoArbitrary_161) {
            return new CoArbitrary(function (_327) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(coarbitrary(__dict_CoArbitrary_160)(_327.value0))(coarbitrary(__dict_CoArbitrary_161)(_327.value1));
            });
        };
    };
    var coarbNumber = new CoArbitrary(Test_QuickCheck_Gen.perturbGen);
    var coarbMaybe = function (__dict_CoArbitrary_162) {
        return new CoArbitrary(function (_329) {
            if (_329 instanceof Data_Maybe.Nothing) {
                return Test_QuickCheck_Gen.perturbGen(1);
            };
            if (_329 instanceof Data_Maybe.Just) {
                return coarbitrary(__dict_CoArbitrary_162)(_329.value0);
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbEither = function (__dict_CoArbitrary_163) {
        return function (__dict_CoArbitrary_164) {
            return new CoArbitrary(function (_328) {
                if (_328 instanceof Data_Either.Left) {
                    return coarbitrary(__dict_CoArbitrary_163)(_328.value0);
                };
                if (_328 instanceof Data_Either.Right) {
                    return coarbitrary(__dict_CoArbitrary_164)(_328.value0);
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var coarbChar = new CoArbitrary(function (c) {
        return coarbitrary(coarbNumber)(Data_Char.toCharCode(c));
    });
    var coarbBoolean = new CoArbitrary(function (_325) {
        if (_325) {
            return Test_QuickCheck_Gen.perturbGen(1);
        };
        if (!_325) {
            return Test_QuickCheck_Gen.perturbGen(2);
        };
        throw new Error("Failed pattern match");
    });
    var coarbArray = function (__dict_CoArbitrary_165) {
        return new CoArbitrary(function (_330) {
            if (_330.length === 0) {
                return Prelude.id(Prelude.categoryArr);
            };
            if (_330.length >= 1) {
                var _1003 = _330.slice(1);
                return Prelude["<<<"](Prelude.semigroupoidArr)(coarbitrary(coarbArray(__dict_CoArbitrary_165))(_1003))(coarbitrary(__dict_CoArbitrary_165)(_330[0]));
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbString = new CoArbitrary(function (s) {
        return coarbitrary(coarbArray(coarbMaybe(coarbNumber)))(Prelude["<$>"](Data_Array.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
    });
    var coarbAlphaNumString = new CoArbitrary(function (_326) {
        return coarbitrary(coarbString)(_326);
    });
    var arbitrary = function (dict) {
        return dict.arbitrary;
    };
    var testableFunction = function (__dict_Arbitrary_168) {
        return function (__dict_Testable_169) {
            return new Testable(function (f) {
                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_168))(function (_20) {
                    return test(__dict_Testable_169)(f(_20));
                });
            });
        };
    };
    var arbTuple = function (__dict_Arbitrary_170) {
        return function (__dict_Arbitrary_171) {
            return new Arbitrary(Prelude["<*>"](Test_QuickCheck_Gen.applyGen)(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(arbitrary(__dict_Arbitrary_170)))(arbitrary(__dict_Arbitrary_171)));
        };
    };
    var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
    var arbFunction = function (__dict_CoArbitrary_173) {
        return function (__dict_Arbitrary_174) {
            return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
                return coarbitrary(__dict_CoArbitrary_173)(a)(arbitrary(__dict_Arbitrary_174));
            }));
        };
    };
    var arbChar = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Char.fromCharCode)(Prelude["*"](Prelude.numNumber)(65535)))(Test_QuickCheck_Gen.uniform));
    var arbBoolean = new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.uniform)(function (_12) {
        return Prelude["return"](Test_QuickCheck_Gen.monadGen)((_12 * 2) < 1);
    }));
    var arbEither = function (__dict_Arbitrary_175) {
        return function (__dict_Arbitrary_176) {
            return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_14) {
                return _14 ? Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Left.create)(arbitrary(__dict_Arbitrary_175)) : Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Right.create)(arbitrary(__dict_Arbitrary_176));
            }));
        };
    };
    var arbMaybe = function (__dict_Arbitrary_172) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_15) {
            return _15 ? Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Maybe.Nothing.value) : Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Maybe.Just.create)(arbitrary(__dict_Arbitrary_172));
        }));
    };
    var arbArray = function (__dict_Arbitrary_177) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_19) {
            return _19 ? Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]) : Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_177))(function (_18) {
    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_177)))(function (_17) {
        return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_18)(_17));
    });
});
        }));
    };
    var arbString = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
    var coarbFunction = function (__dict_Arbitrary_166) {
        return function (__dict_CoArbitrary_167) {
            return new CoArbitrary(function (f) {
                return function (gen) {
                    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_166)))(function (_16) {
                        return coarbitrary(coarbArray(__dict_CoArbitrary_167))(Data_Array.map(f)(_16))(gen);
                    });
                };
            });
        };
    };
    var arbAlphaNumString = new Arbitrary((function () {
        var lookup = function (x) {
            var index = Math.round(x * (Data_String.length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") - 1));
            return Data_String_Unsafe.charAt(index)("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        };
        return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(arbNumber)))(function (_13) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude["<<<"](Prelude.semigroupoidArr)(AlphaNumString.create)(Data_String.fromCharArray)(Prelude["<$>"](Data_Array.functorArray)(lookup)(_13)));
        });
    })());
    return {
        "<?>": $less$qmark$greater, 
        AlphaNumString: AlphaNumString, 
        Arbitrary: Arbitrary, 
        CoArbitrary: CoArbitrary, 
        Failed: Failed, 
        Success: Success, 
        Testable: Testable, 
        arbAlphaNumString: arbAlphaNumString, 
        arbArray: arbArray, 
        arbBoolean: arbBoolean, 
        arbChar: arbChar, 
        arbEither: arbEither, 
        arbFunction: arbFunction, 
        arbMaybe: arbMaybe, 
        arbNumber: arbNumber, 
        arbString: arbString, 
        arbTuple: arbTuple, 
        arbitrary: arbitrary, 
        coarbAlphaNumString: coarbAlphaNumString, 
        coarbArray: coarbArray, 
        coarbBoolean: coarbBoolean, 
        coarbChar: coarbChar, 
        coarbEither: coarbEither, 
        coarbFunction: coarbFunction, 
        coarbMaybe: coarbMaybe, 
        coarbNumber: coarbNumber, 
        coarbString: coarbString, 
        coarbTuple: coarbTuple, 
        coarbitrary: coarbitrary, 
        quickCheck: quickCheck, 
        "quickCheck'": quickCheck$prime, 
        quickCheckPure: quickCheckPure, 
        showResult: showResult, 
        test: test, 
        testableBoolean: testableBoolean, 
        testableFunction: testableFunction, 
        testableResult: testableResult
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Debug_Trace = PS.Debug_Trace;
    var Test_QuickCheck = PS.Test_QuickCheck;
    var main = function __do() {
        Debug_Trace.trace("first test")();
        Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableBoolean))))(function (a) {
            return function (b) {
                return function (c) {
                    return (a && b || c) === ((a || c) && (b || c));
                };
            };
        })();
        return Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableFunction(Test_QuickCheck.arbBoolean)(Test_QuickCheck.testableBoolean))))(function (a) {
            return function (b) {
                return function (c) {
                    return (a && b || c) === ((a || c) && (b || c));
                };
            };
        })();
    };
    var arbNonEmpty = function (__dict_Arbitrary_178) {
        return new Test_QuickCheck.Arbitrary();
    };
    return {
        arbNonEmpty: arbNonEmpty, 
        main: main, 
        undefined: undefined
    };
})();
